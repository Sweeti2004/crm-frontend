{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  tickets: [],\n  isLoading: false,\n  error: \"\",\n  //   replyTicketError: \"\",\n  searchTicketList: [],\n  selectedTicket: {}\n  //   replyMsg: \"\",\n};\nconst ticketListSlice = createSlice({\n  name: 'ticketList',\n  initialState,\n  reducers: {\n    fetchTicketLoading: state => {\n      state.isLoading = true;\n    },\n    fetchTicketSuccess: (state, action) => {\n      state.tickets = action.payload;\n      state.searchTicketList = action.payload;\n      state.isLoading = false;\n    },\n    fetchTicketFail: (state, {\n      payload\n    }) => {\n      state.isLoading = false;\n      state.error = payload;\n    },\n    searchTickets: (state, {\n      payload\n    }) => {\n      state.searchTicketList = state.tickets.filter(row => {\n        if (!payload) return row;\n        return row.subject.toLowerCase().includes(payload.toLowerCase());\n      });\n    },\n    fetchSingleTicketLoading: state => {\n      state.isLoading = true;\n    },\n    fetchSingleTicketSuccess: (state, {\n      payload\n    }) => {\n      state.selectedTicket = payload;\n      state.isLoading = false;\n      state.error = \"\";\n    },\n    fetchSingleTicketFail: (state, {\n      payload\n    }) => {\n      state.isLoading = false;\n      state.error = payload;\n    },\n    replyTicketLoading: state => {\n      state.isLoading = true;\n    },\n    replyTicketSuccess: (state, {\n      payload\n    }) => {\n      state.isLoading = false;\n      state.error = \"\";\n      state.replyMsg = payload;\n    },\n    replyTicketFail: (state, {\n      payload\n    }) => {\n      state.isLoading = false;\n      state.replyTicketError = payload;\n    },\n    closeTicketLoading: state => {\n      state.isLoading = true;\n    },\n    closeTicketSuccess: (state, {\n      payload\n    }) => {\n      state.isLoading = false;\n      state.error = \"\";\n      state.replyMsg = payload;\n    },\n    closeTicketFail: (state, {\n      payload\n    }) => {\n      state.isLoading = false;\n      state.error = payload;\n    }\n  }\n});\nconst {\n  reducer,\n  actions\n} = ticketListSlice;\nexport const {\n  fetchTicketLoading,\n  fetchTicketSuccess,\n  fetchTicketFail,\n  searchTickets,\n  fetchSingleTicketLoading,\n  fetchSingleTicketSuccess,\n  fetchSingleTicketFail,\n  replyTicketLoading,\n  replyTicketSuccess,\n  replyTicketFail,\n  closeTicketLoading,\n  closeTicketSuccess,\n  cl\n} = actions;\nexport default reducer;","map":{"version":3,"names":["createSlice","initialState","tickets","isLoading","error","searchTicketList","selectedTicket","ticketListSlice","name","reducers","fetchTicketLoading","state","fetchTicketSuccess","action","payload","fetchTicketFail","searchTickets","filter","row","subject","toLowerCase","includes","fetchSingleTicketLoading","fetchSingleTicketSuccess","fetchSingleTicketFail","replyTicketLoading","replyTicketSuccess","replyMsg","replyTicketFail","replyTicketError","closeTicketLoading","closeTicketSuccess","closeTicketFail","reducer","actions","cl"],"sources":["C:/Users/hp/OneDrive/Documents/Desktop/CRM/crm-frontend/frontend/src/page/ticket-list/ticketsSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  tickets: [],\r\n  isLoading: false,\r\n  error: \"\",\r\n//   replyTicketError: \"\",\r\n  searchTicketList: [],\r\n   selectedTicket: {},\r\n//   replyMsg: \"\",\r\n};\r\n\r\nconst ticketListSlice= createSlice({\r\n    name:'ticketList',\r\n    initialState,\r\n    reducers:{\r\n    fetchTicketLoading: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n    fetchTicketSuccess: (state, action) => {\r\n      state.tickets = action.payload;\r\n      state.searchTicketList = action.payload;\r\n      state.isLoading = false;\r\n    },\r\n    fetchTicketFail: (state, { payload }) => {\r\n      state.isLoading = false;\r\n      state.error = payload;\r\n    },\r\n     searchTickets: (state, { payload }) => {\r\n      state.searchTicketList = state.tickets.filter((row) => {\r\n        if (!payload) return row;\r\n\r\n        return row.subject.toLowerCase().includes(payload.toLowerCase());\r\n      });\r\n    },\r\n    fetchSingleTicketLoading: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n    fetchSingleTicketSuccess: (state, { payload }) => {\r\n      state.selectedTicket = payload;\r\n      state.isLoading = false;\r\n      state.error = \"\";\r\n    },\r\n    fetchSingleTicketFail: (state, { payload }) => {\r\n      state.isLoading = false;\r\n      state.error = payload;\r\n    }, replyTicketLoading: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n    replyTicketSuccess: (state, { payload }) => {\r\n      state.isLoading = false;\r\n      state.error = \"\";\r\n      state.replyMsg = payload;\r\n    },\r\n    replyTicketFail: (state, { payload }) => {\r\n      state.isLoading = false;\r\n      state.replyTicketError = payload;\r\n    },\r\n     closeTicketLoading: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n    closeTicketSuccess: (state, { payload }) => {\r\n      state.isLoading = false;\r\n      state.error = \"\";\r\n      state.replyMsg = payload;\r\n    },\r\n    closeTicketFail: (state, { payload }) => {\r\n      state.isLoading = false;\r\n      state.error = payload;\r\n    },\r\n}\r\n})\r\n\r\nconst {reducer,actions}=ticketListSlice;\r\nexport const {fetchTicketLoading,fetchTicketSuccess,fetchTicketFail,searchTickets, fetchSingleTicketLoading,\r\n  fetchSingleTicketSuccess,\r\n  fetchSingleTicketFail,replyTicketLoading,replyTicketSuccess,replyTicketFail,closeTicketLoading,closeTicketSuccess,cl}=actions\r\nexport default reducer"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}