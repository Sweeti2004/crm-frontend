{"ast":null,"code":"import{fetchTicketLoading,fetchTicketSuccess,fetchTicketFail,searchTickets,fetchSingleTicketLoading,fetchSingleTicketSuccess,fetchSingleTicketFail,replyTicketLoading,replyTicketSuccess,replyTicketFail,closeTicketLoading,closeTicketSuccess,closeTicketFail}from\"./ticketsSlice\";import{getAllTickets,getSingleTicket,updateReplyTicket,updateTicketStatusClosed}from'../../api/ticketApi';export const fetchAllTickets=()=>async dispatch=>{dispatch(fetchTicketLoading());try{const result=await getAllTickets();if(result.data.status===\"success\"){dispatch(fetchTicketSuccess(result.data.result));}else{dispatch(fetchTicketFail(result.data.message));}}catch(error){dispatch(fetchTicketFail(error.message));}};export const filterSerachTicket=str=>dispatch=>{dispatch(searchTickets(str));};// Actions for single ticket only\nexport const fetchSingleTicket=_id=>async dispatch=>{dispatch(fetchSingleTicketLoading());try{const result=await getSingleTicket(_id);if(result.data.status===\"success\"){dispatch(fetchSingleTicketSuccess(result.data.result.length&&result.data.result));}else{dispatch(fetchSingleTicketFail(result.data.message));}}catch(error){dispatch(fetchSingleTicketFail(error.message));}};//Actions for replying on single ticket\nexport const replyOnTicket=(_id,msgObj)=>async dispatch=>{dispatch(replyTicketLoading());try{const result=await updateReplyTicket(_id,msgObj);console.log(result);if(result.status===\"error\"){return dispatch(replyTicketFail(result.message));}dispatch(fetchSingleTicket(_id));dispatch(replyTicketSuccess(result.message));}catch(error){console.log(error.message);dispatch(replyTicketFail(error.message));}};//Actions for closing ticket\nexport const closeTicket=_id=>async dispatch=>{dispatch(closeTicketLoading());try{const result=await updateTicketStatusClosed(_id);if(result.status===\"error\"){return dispatch(closeTicketFail(result.message));}dispatch(fetchSingleTicket(_id));dispatch(closeTicketSuccess(\"Status Updated successfully\"));}catch(error){console.log(error.message);dispatch(closeTicketFail(error.message));}};","map":{"version":3,"names":["fetchTicketLoading","fetchTicketSuccess","fetchTicketFail","searchTickets","fetchSingleTicketLoading","fetchSingleTicketSuccess","fetchSingleTicketFail","replyTicketLoading","replyTicketSuccess","replyTicketFail","closeTicketLoading","closeTicketSuccess","closeTicketFail","getAllTickets","getSingleTicket","updateReplyTicket","updateTicketStatusClosed","fetchAllTickets","dispatch","result","data","status","message","error","filterSerachTicket","str","fetchSingleTicket","_id","length","replyOnTicket","msgObj","console","log","closeTicket"],"sources":["C:/Users/hp/OneDrive/Documents/Desktop/CRM/crm-frontend/frontend/src/page/ticket-list/ticketsAction.js"],"sourcesContent":["import {\r\n  fetchTicketLoading,\r\n  fetchTicketSuccess,\r\n  fetchTicketFail,\r\n  searchTickets,\r\n  fetchSingleTicketLoading,\r\n  fetchSingleTicketSuccess,\r\n  fetchSingleTicketFail,\r\n  replyTicketLoading,\r\n  replyTicketSuccess,\r\n  replyTicketFail,\r\n  closeTicketLoading,\r\n  closeTicketSuccess,\r\n  closeTicketFail,\r\n} from \"./ticketsSlice\";\r\n\r\nimport { getAllTickets, getSingleTicket,updateReplyTicket,updateTicketStatusClosed } from '../../api/ticketApi';\r\n\r\nexport const fetchAllTickets = () => async (dispatch) => {\r\n  dispatch(fetchTicketLoading());\r\n  try {\r\n    const result = await getAllTickets();\r\n\r\n    if (result.data.status === \"success\") {\r\n      dispatch(fetchTicketSuccess(result.data.result));\r\n    } else {\r\n      dispatch(fetchTicketFail(result.data.message));\r\n    }\r\n\r\n  } catch (error) {\r\n    dispatch(fetchTicketFail(error.message));\r\n  }\r\n};\r\n\r\nexport const filterSerachTicket = (str) => (dispatch) => {\r\n  dispatch(searchTickets(str));\r\n};\r\n\r\n// Actions for single ticket only\r\nexport const fetchSingleTicket = (_id) => async (dispatch) => {\r\n  dispatch(fetchSingleTicketLoading());\r\n  try {\r\n    const result = await getSingleTicket(_id);\r\n\r\n    if (result.data.status === \"success\") {\r\n      dispatch(fetchSingleTicketSuccess(result.data.result.length && result.data.result));\r\n    } else {\r\n      dispatch(fetchSingleTicketFail(result.data.message));\r\n    }\r\n\r\n  } catch (error) {\r\n    dispatch(fetchSingleTicketFail(error.message));\r\n  }\r\n};\r\n\r\n//Actions for replying on single ticket\r\nexport const replyOnTicket = (_id, msgObj) => async (dispatch) => {\r\n  dispatch(replyTicketLoading());\r\n  try {\r\n     const result = await updateReplyTicket(_id, msgObj);\r\n    console.log(result);\r\n    if (result.status === \"error\") {\r\n      return dispatch(replyTicketFail(result.message));\r\n    }\r\n\r\n    dispatch(fetchSingleTicket(_id));\r\n\r\n    dispatch(replyTicketSuccess(result.message));\r\n  } catch (error) {\r\n    console.log(error.message);\r\n    dispatch(replyTicketFail(error.message));\r\n  }\r\n};\r\n\r\n//Actions for closing ticket\r\nexport const closeTicket = (_id) => async (dispatch) => {\r\n  dispatch(closeTicketLoading());\r\n  try {\r\n    const result = await updateTicketStatusClosed(_id);\r\n    if (result.status === \"error\") {\r\n      return dispatch(closeTicketFail(result.message));\r\n    }\r\n\r\n    dispatch(fetchSingleTicket(_id));\r\n\r\n    dispatch(closeTicketSuccess(\"Status Updated successfully\"));\r\n  } catch (error) {\r\n    console.log(error.message);\r\n    dispatch(closeTicketFail(error.message));\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}