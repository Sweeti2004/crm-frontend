{"ast":null,"code":"import { fetchTicketLoading, fetchTicketSuccess, fetchTicketFail, searchTickets, fetchSingleTicketLoading, fetchSingleTicketSuccess, fetchSingleTicketFail, replyTicketLoading, replyTicketSuccess, replyTicketFail } from \"./ticketsSlice\";\nimport { getAllTickets, getSingleTicket } from '../../api/ticketApi';\nexport const fetchAllTickets = () => async dispatch => {\n  dispatch(fetchTicketLoading());\n  try {\n    const result = await getAllTickets();\n    if (result.data.status === \"success\") {\n      dispatch(fetchTicketSuccess(result.data.result));\n    } else {\n      dispatch(fetchTicketFail(result.data.message));\n    }\n  } catch (error) {\n    dispatch(fetchTicketFail(error.message));\n  }\n};\nexport const filterSerachTicket = str => dispatch => {\n  dispatch(searchTickets(str));\n};\n\n// Actions for single ticket only\nexport const fetchSingleTicket = _id => async dispatch => {\n  dispatch(fetchSingleTicketLoading());\n  try {\n    const result = await getSingleTicket(_id);\n    if (result.data.status === \"success\") {\n      dispatch(fetchSingleTicketSuccess(result.data.result));\n    } else {\n      dispatch(fetchSingleTicketFail(result.data.message));\n    }\n  } catch (error) {\n    dispatch(fetchSingleTicketFail(error.message));\n  }\n};\n\n//Actions for replying on single ticket\nexport const replyOnTicket = (_id, msgObj) => async dispatch => {\n  dispatch(replyTicketLoading());\n  try {\n    dispatch(replyTicketSuccess());\n    const result = await updateReplyTicket(_id, msgObj);\n    // console.log(result);\n    // if (result.status === \"error\") {\n    //   return dispatch(replyTicketFail(result.message));\n    // }\n\n    // dispatch(fetchSingleTicket(_id));\n\n    // dispatch(replyTicketSuccess(result.message));\n  } catch (error) {\n    console.log(error.message);\n    dispatch(replyTicketFail(error.message));\n  }\n};","map":{"version":3,"names":["fetchTicketLoading","fetchTicketSuccess","fetchTicketFail","searchTickets","fetchSingleTicketLoading","fetchSingleTicketSuccess","fetchSingleTicketFail","replyTicketLoading","replyTicketSuccess","replyTicketFail","getAllTickets","getSingleTicket","fetchAllTickets","dispatch","result","data","status","message","error","filterSerachTicket","str","fetchSingleTicket","_id","replyOnTicket","msgObj","updateReplyTicket","console","log"],"sources":["C:/Users/hp/OneDrive/Documents/Desktop/CRM/crm-frontend/frontend/src/page/ticket-list/ticketsAction.js"],"sourcesContent":["import {\r\n  fetchTicketLoading,\r\n  fetchTicketSuccess,\r\n  fetchTicketFail,\r\n  searchTickets,\r\n  fetchSingleTicketLoading,\r\n  fetchSingleTicketSuccess,\r\n  fetchSingleTicketFail,\r\n  replyTicketLoading,\r\n  replyTicketSuccess,\r\n  replyTicketFail\r\n} from \"./ticketsSlice\";\r\n\r\nimport { getAllTickets, getSingleTicket } from '../../api/ticketApi';\r\n\r\nexport const fetchAllTickets = () => async (dispatch) => {\r\n  dispatch(fetchTicketLoading());\r\n  try {\r\n    const result = await getAllTickets();\r\n\r\n    if (result.data.status === \"success\") {\r\n      dispatch(fetchTicketSuccess(result.data.result));\r\n    } else {\r\n      dispatch(fetchTicketFail(result.data.message));\r\n    }\r\n\r\n  } catch (error) {\r\n    dispatch(fetchTicketFail(error.message));\r\n  }\r\n};\r\n\r\nexport const filterSerachTicket = (str) => (dispatch) => {\r\n  dispatch(searchTickets(str));\r\n};\r\n\r\n// Actions for single ticket only\r\nexport const fetchSingleTicket = (_id) => async (dispatch) => {\r\n  dispatch(fetchSingleTicketLoading());\r\n  try {\r\n    const result = await getSingleTicket(_id);\r\n\r\n    if (result.data.status === \"success\") {\r\n      dispatch(fetchSingleTicketSuccess(result.data.result));\r\n    } else {\r\n      dispatch(fetchSingleTicketFail(result.data.message));\r\n    }\r\n\r\n  } catch (error) {\r\n    dispatch(fetchSingleTicketFail(error.message));\r\n  }\r\n};\r\n\r\n//Actions for replying on single ticket\r\nexport const replyOnTicket = (_id, msgObj) => async (dispatch) => {\r\n  dispatch(replyTicketLoading());\r\n  try {\r\n    dispatch(replyTicketSuccess())\r\n     const result = await updateReplyTicket(_id, msgObj);\r\n    // console.log(result);\r\n    // if (result.status === \"error\") {\r\n    //   return dispatch(replyTicketFail(result.message));\r\n    // }\r\n\r\n    // dispatch(fetchSingleTicket(_id));\r\n\r\n    // dispatch(replyTicketSuccess(result.message));\r\n  } catch (error) {\r\n    console.log(error.message);\r\n    dispatch(replyTicketFail(error.message));\r\n  }\r\n};"],"mappings":"AAAA,SACEA,kBAAkB,EAClBC,kBAAkB,EAClBC,eAAe,EACfC,aAAa,EACbC,wBAAwB,EACxBC,wBAAwB,EACxBC,qBAAqB,EACrBC,kBAAkB,EAClBC,kBAAkB,EAClBC,eAAe,QACV,gBAAgB;AAEvB,SAASC,aAAa,EAAEC,eAAe,QAAQ,qBAAqB;AAEpE,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EACvDA,QAAQ,CAACb,kBAAkB,CAAC,CAAC,CAAC;EAC9B,IAAI;IACF,MAAMc,MAAM,GAAG,MAAMJ,aAAa,CAAC,CAAC;IAEpC,IAAII,MAAM,CAACC,IAAI,CAACC,MAAM,KAAK,SAAS,EAAE;MACpCH,QAAQ,CAACZ,kBAAkB,CAACa,MAAM,CAACC,IAAI,CAACD,MAAM,CAAC,CAAC;IAClD,CAAC,MAAM;MACLD,QAAQ,CAACX,eAAe,CAACY,MAAM,CAACC,IAAI,CAACE,OAAO,CAAC,CAAC;IAChD;EAEF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdL,QAAQ,CAACX,eAAe,CAACgB,KAAK,CAACD,OAAO,CAAC,CAAC;EAC1C;AACF,CAAC;AAED,OAAO,MAAME,kBAAkB,GAAIC,GAAG,IAAMP,QAAQ,IAAK;EACvDA,QAAQ,CAACV,aAAa,CAACiB,GAAG,CAAC,CAAC;AAC9B,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAIC,GAAG,IAAK,MAAOT,QAAQ,IAAK;EAC5DA,QAAQ,CAACT,wBAAwB,CAAC,CAAC,CAAC;EACpC,IAAI;IACF,MAAMU,MAAM,GAAG,MAAMH,eAAe,CAACW,GAAG,CAAC;IAEzC,IAAIR,MAAM,CAACC,IAAI,CAACC,MAAM,KAAK,SAAS,EAAE;MACpCH,QAAQ,CAACR,wBAAwB,CAACS,MAAM,CAACC,IAAI,CAACD,MAAM,CAAC,CAAC;IACxD,CAAC,MAAM;MACLD,QAAQ,CAACP,qBAAqB,CAACQ,MAAM,CAACC,IAAI,CAACE,OAAO,CAAC,CAAC;IACtD;EAEF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdL,QAAQ,CAACP,qBAAqB,CAACY,KAAK,CAACD,OAAO,CAAC,CAAC;EAChD;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,aAAa,GAAGA,CAACD,GAAG,EAAEE,MAAM,KAAK,MAAOX,QAAQ,IAAK;EAChEA,QAAQ,CAACN,kBAAkB,CAAC,CAAC,CAAC;EAC9B,IAAI;IACFM,QAAQ,CAACL,kBAAkB,CAAC,CAAC,CAAC;IAC7B,MAAMM,MAAM,GAAG,MAAMW,iBAAiB,CAACH,GAAG,EAAEE,MAAM,CAAC;IACpD;IACA;IACA;IACA;;IAEA;;IAEA;EACF,CAAC,CAAC,OAAON,KAAK,EAAE;IACdQ,OAAO,CAACC,GAAG,CAACT,KAAK,CAACD,OAAO,CAAC;IAC1BJ,QAAQ,CAACJ,eAAe,CAACS,KAAK,CAACD,OAAO,CAAC,CAAC;EAC1C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}